#! /bin/bash

# This shell script will first run gendocs.sh on the Texinfo source
# which creates the standrard GNU webpage style documentation
# page. Then it does some modifications to the HTMLs produced:
#
# 1. Add a CSS sytlesheet.
# 2. Add MathJax.
# 3. Add a "GNU Astronomy Utilities manual" title on the top.
# 4. Add a link to read in different formats.
# 5. If MathJax was used in a page, add a link to Javascript.html
# 6. Add a link to the main Gnuastro webpage on the bottom.
# 7. Remove the border from cartouche in the HTML.
#
# After making all these changes, it copies all the necessry files in
# in the folder that will be linked to the GNU servers and it will run
# CVS to upload them there.
#
#
# NOTE FOR FIRST TIME MAINTAINERS
# -------------------------------
#
# The GNU webpage is version controlled by CVS and operates based on
# it. CVS is no longer popular anymore, but the commands below should
# be enough for the initial setup. Afterwards, you can just run this
# scripot.
#
#   1. Choose the top directory to keep your local copy of the webpage
#      (TOPWEBCHECKOUT). Note that especially because of MathJax,
#      there are a HUGE number of files and since everything is
#      generated from the single gnuastro.texi file, there is no need
#      to take up your backup space. So you can put that directory in
#      some directory that is not backed up, it can be anywhere.
#
#   2. Make a directory to keep the copy of the webpage.
#         $ mkdir $TOPWEBCHECKOUT
#
#   3. Set the CVSROOT environment variable, just replace SAVANNAHID
#      with your Savannah ID, it will use the key you have registered
#      on Savannah for authentication.
#         $ export CVSROOT=:ext:SAVANNAHID@cvs.sv.gnu.org:/web/gnuastro
#
#   4. Checkout a copy of the webpage:
#         $ cvs checkout ./
#
#
# New pages
# ---------
#
# When a new page is added, after all the "cvs commit: Examining ..."
# reports, you will see a line for each new file starting with a
# '?'. Assume FILES is a string of all these files (that have a `?' in
# the CVS commit of this script). Run these commands to go into your
# local checkout and add those files to the repository.
#
#     $ cd $TOPWEBCHECKOUT/gnuastro
#     $ cvs add FILES
#     $ cvs commit -m "New file added"
#
#"
#
# Original author:
#     Mohammad Akhlaghi <akhlaghi@gnu.org>
# Contributing author(s):
# Copyright (C) 2016, Free Software Foundation, Inc.
#
# Gnuastro is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Gnuastro is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gnuastro. If not, see <http://www.gnu.org/licenses/>.


# Initial settings:
set -o nounset                  # Stop if a variable is not set.
set -o errexit                  # Stop if a program returns false.





# The date that is printed on the manual is generated looking at the
# modification time of gnuastro.texi, not `../configure' that was used to
# generate the version number. This can cause confusion, since the version
# number (coming from the commit) will have a different date in the
# revision history. To avoid this, here we check if the `../configure'
# modification date is similar to that on 'gnuastro.texi' or not. If it
# isn't a warning error is printed to let the user know, so they take the
# appropriate action.
cdate=$(../bootstrapped/build-aux/mdate-sh ../configure)
tdate=$(../bootstrapped/build-aux/mdate-sh ./gnuastro.texi)
if [ "$cdate" != "$tdate" ]; then
    cat <<EOF

The modification dates of ../configure and ./gnuastro.texi are not the
same. The version number printed on the manual was generated with
../configure, however the date (that is printed beside the version number)
comes from the last modification date of ./gnuastro.texi. This can cause
confusion if it is put on the webpage like this!

So please resolve this conflict!

If everything is OK and "autoconf -f" or bootstrapping was done today, you
can run "touch ./gnuastro.texi" to give it the current modification date. If
not, please regenerate ./configure (with autoconf -f) and run "make
distcheck" (to see if everything is working), then "touch
./gnuastro.texi" to upload the documentation to the webpage.

The webpage is the official place for the manual and it is very important
that it does not cause confusions for readers who are not too familiar with
the inner workings of these scripts.

EOF
fi




# Top CVS (webpage checkout) copy
TOPWEBCHECKOUT=~/Development/gnuastro-web





# For the permissions of the output:
umask 002





# Remove the manual/ directory if it exists (because gendocs.sh will
# write everything there).
if [ -d ./manual ]; then rm -rf ./manual; fi




# Run gendocs.sh to generate all the files:
../bootstrapped/build-aux/gendocs.sh --email bug-gnuastro@gnu.org gnuastro \
   "GNU Astronomy Utilities manual" --html " "

# Delete all the temporary files.
rm -f gnuastro.aux gnuastro.cp gnuastro.cps gnuastro.fn gnuastro.ky \
   gnuastro.log gnuastro.pg gnuastro.toc gnuastro.tp gnuastro.vr    \
   gnuastro.vrs



# Copy the two necessary files in the manual directory:
cp javascript.html style.css ./manual/





# Get the current month to put under all the pages.
thismonth=$(date +"%B %Y")




# The "Internal Field Separator" (IFS) is used to split words and lines
# after expansions. In the process of correcting the HTMLs, we need to
# remove any field separator for the script to work correctly, so we set
# IFS to nothing (''). However, later on we will be needing the default
# values in finding the proper files that have been updated, so we keep the
# old value in a variable to reset it again later.
OLDIFS=$IFS
IFS=''





# Make the proper corrections to the HTML files:
echo
htmldatecomment='<!-- Inserted date. This line will be ignored by diff -->'
echo %%%%% Correcting the HTMLs %%%%%
# Correct the address of the `(dir)' links on the top pages of both
# HTML outputs. In the ./manual/gnuastro.html, it is `dir.html#top'
# which should be change to index.html. In
# ./manual/html_node/index.html, it is `../dir/index.html' which
# should become ../index.html
cat ./manual/gnuastro.html | sed s/dir\.html\#Top/index.html/g > tmp.txt
mv tmp.txt ./manual/gnuastro.html
cat ./manual/html_node/index.html | sed -e 's/\/dir\//\//g' > tmp.txt
mv tmp.txt ./manual/html_node/index.html

if [ -f tmp.html ]; then rm tmp.html; fi

for file in manual/gnuastro.html manual/html_node/*.html
do
    if grep -q '\\(\|$$' "$file";
    then hasjavascript="yes"
    else hasjavascript="no"
    fi

    if [ "$file" != manual/gnuastro.html ] && [ "$file" != manual/html_node/index.html ];
    then addtitle="yes"
    else addtitle="no"
    fi

    while read -r line; do

        # Actions that must be done before a given line:
        if [ "$line" = "</head>" ]; then
            if [ "$file" = manual/gnuastro.html ]; then
                cssbase="./"
                jsbase="../"
            else
                cssbase="../"
                jsbase="../../"
            fi
            echo "<link rel=\"stylesheet\" type=\"text/css\" href=\""$cssbase"style.css\">" >> tmp.html
            if [ $hasjavascript = "yes" ]; then
                echo "<script src=\""$jsbase"MathJax/MathJax.js?config=TeX-AMS_HTML\"></script>" >> tmp.html
                echo "" >> tmp.html
            fi
        fi

        if [ "$line" = "</body>" ]; then

            # Put a blank line to finish the main body of the page.
            echo "<hr>" >> tmp.html

            # Add a notice in case Javascript is disabled.
            if [ $hasjavascript = "yes" ]; then
                echo "" >> tmp.html
                echo "<noscript>" >> tmp.html
                echo "<table class=\"cartouche\" style=\"background-color:#FF9912;\"><tr><td><p>" >> tmp.html
                echo "<b>Warning:</b> This page uses <a href=\"http://www.mathjax.org/\">MathJax</a>" >> tmp.html
                echo "to render TeX equations. MathJax requires JavaScript for the rendering." >> tmp.html
                echo "However, scripts are disabled." >> tmp.html
                echo "<br /><br />" >> tmp.html
                echo "To see the equations, you can either use <a href=\"https://www.gnu.org/software/librejs/\">LibreJS</a>" >> tmp.html
                echo "to allow trusted scripts, or get the full manual in <a href=\""$cssbase"gnuastro.pdf\">PDF</a>." >> tmp.html
                echo "</p></td></tr></table>" >> tmp.html
                echo "</noscript>" >> tmp.html
                echo "" >> tmp.html
            fi
            echo "<p><a href=\"http://www.gnu.org/software/gnuastro/manual\">Read in other formats</a>." >> tmp.html
            if [ $hasjavascript = "yes" ]; then
                echo "<br><a href=\"http://www.gnu.org/software/gnuastro/manual/javascript.html\" rel=\"jslicense\">JavaScript license information</a>" >> tmp.html
            fi
            # Note that the htmldatecomment put after this line is later
            # used to ignore this line in the diffs (so the months on the
            # webpage don't change if this page hasn't changed).
            echo "<br><a href=\"http://www.gnu.org/software/gnuastro\">GNU Astronomy Utilities</a> manual, $thismonth.</p> $htmldatecomment" >> tmp.html
        fi

        #Do any modifications to the line:
        temp1=${line:0:5}
        if [ "$temp1" = "<tabl" ]; then
            temp2=$(echo "$line" | sed -e "s/class=\"cartouche\" border=\"1\"/class=\"cartouche\"/")
            line=$temp2
        fi

        # Add the line:
        echo $line >> tmp.html

        # Actions after a given line:
        if [ "$temp1" = "<body" ]; then

            # Add a title.
            if [ $addtitle = "yes" ]; then
            echo "<h2>GNU Astronomy Utilities manual</h2>" >> tmp.html
            fi
        fi
    done < "$file"
    mv tmp.html "$file"
done
echo %%%%% DONE %%%%%


# Copy the gnuastro-top.html page into index.html (by only if it actually
# differs from it.
if ! diff gnuastro-top.html $TOPWEBCHECKOUT/gnuastro/index.html; then
    cp gnuastro-top.html $TOPWEBCHECKOUT/gnuastro/index.html
fi





# Copy the generated files to the proper directory. Note that the majority
# of the HTML files in `html_node' have not changed, so CVS doesn't check
# for the file contents, and so will update everything that is copied,
# therefore we only want to copy the files that have actually changed. But
# first, reset the IFS variable to its default value.
#
# Note that gendocs automatically puts a version number in the comments of
# the generated HTML files. This creates a difference even if
IFS=$OLDIFS
echo; echo; echo; echo "diff results:"
for filename in $(find ./manual/ -type f -print)
do
    echo "$filename:"
    if diff $filename $TOPWEBCHECKOUT/gnuastro/$filename \
            -I '<!-- This book documents version'        \
            -I "$htmldatecomment"; then
        echo " -- Content not changed."
    else
        cp $filename $TOPWEBCHECKOUT/gnuastro/$filename;
        echo " -- Copied to $TOPWEBCHECKOUT/gnuastro/"
    fi
done





# Remove the manual directory from here, since it isn't needed any more.
rm -rf ./manual





# Go into the top CVS directory, and commit the new changes to the GNU
# server.
cd $TOPWEBCHECKOUT/gnuastro
cvs commit -m "Update"
