Gnuastro release checklist
==========================

Copyright (C) 2015-2019 Free Software Foundation, Inc.
See the end of the file for license conditions.

This file is primarily intended for the Gnuastro maintainer and lists the
set of operations to do for making each release. This should be done after
all the commits needed for this release have been completed.

 - [STABLE] Run a spell-check (in emacs, with `M-x ispell') on the new
   parts of the book. You can put them in a test file with this command,
   just replace X.X with the previous version:

       $ git diff gnuastro_vX.X..HEAD doc/gnuastro.texi | grep ^\+  \
             > ~/gnuastro_book_new_parts.txt


 - [STABLE] Check if THANKS, and the book's Acknowledgments section have
   everyone in `doc/announce-acknowledge.txt' in them. To see who has been
   added in the `THANKS' file since the last stable release (to add in the
   book), you can use this command:

       $ git diff gnuastro_vP.P..HEAD THANKS


 - Build the Debian distribution (just for a test) and correct any build or
   Lintian warnings. This is recommended, even if you don't actually want
   to make a release before the alpha or main release. Because the warnings
   are very useful in making the package build cleanly on other systems.

   If you don't actually want to make a Debian release, in the end, instead
   of running `git push', just delete the top commits that you made in the
   three branchs with the following command

       $ git checkout master
       $ git tag -d debian/$ver-1
       $ git reset --hard HEAD~1        # To go to the merge with upstream.
       $ git reset --hard HEAD~1            # To go to last Debian release.
       $ git checkout pristine-tar
       $ git reset --hard HEAD~1
       $ git checkout upstream
       $ git tag -d upstream/$ver
       $ git reset --hard HEAD~1
       $ git checkout master
       $ git log --oneline --graph --decorate --all   # For a visual check.


 - [STABLE] Update the versions in the NEWS file.


 - Check if README includes all the recent updates and important features.


 - Run the following commands to keep the list of people who contributed
   code and those that must be acknowledged for the announcement (`P.P' is
   the previous version).

     $ git shortlog gnuastro_vP.P...HEAD --numbered --summary > ~/people.txt
     $ cat doc/announce-acknowledge.txt >> ~/people.txt

     [STABLE] Remove the names in `doc/announce-acknowledge.txt'.


 - [STABLE] Correct the version links, and date, in the webpage
   (`doc/gnuastro.en.html' and `doc/gnuastro.fr.html'). Note that this is
   not for upload at this stage, it is only for the version control.


 - Commit all these changes:

     $ git add -u
     $ git commit


 - Update Gnulib and Autoconf archives, then remove all the non-version
   controlled files and bootstrap Gnuastro:

     $ git clean -fxd
     $ ./bootstrap --copy --gnulib-srcdir=/path/to/updated/gnulib


 - Update the version and build Gnuastro, all done with the `-p' option of
   `./developer-build'. But we'll give it a `pure-junk' directory so it
   doesn't actually upload the build.

     $ ./developer-build -p pure-junk


 - [STABLE] Make sure the tarball doesn't have any problems:

     $ cd build
     $ make distcheck -j8


 - [STABLE]: After the `make distcheck' is safely finished, tag the release:

     $ cd ..
     $ git tag -a gnuastro_vX.X


 - [STABLE] The tag will cause a change in the tarball version. Run the
   following commands to build the final tarball.

     $ ./developer-build -a -c -C -d
     $ cd build
     $ make dist dist-lzip       # to build `tar.gz' and `tar.lz'.


 - Upload the tarball with the command below: Note that `gnupload'
   uses `ncftpput' which comes with the `ncftp' package. The replaces
   are necessary for the symbolic links.

   - Set the key-ID as a variable for easy steps later:

       $ mykeyid=XXXXXXXXXXXXXXXXX

   - For an alpha upload:

       $  /path/to/gnulib/build-aux/gnupload --to alpha.gnu.org:gnuastro   \
               --replace --symlink-regex="s/X.X.XXX-XXXX/alpha-latest/"    \
               --user $mykeyid gnuastro-X.X.XXX-XXXX.tar.lz

   - For a stable release:

       $  /path/to/gnulib/build-aux/gnupload --to ftp.gnu.org:gnuastro     \
               --replace --symlink-regex --user $mykeyid                   \
               gnuastro-X.X.tar.gz gnuastro-X.X.tar.lz


 - [STABLE] Build the manual in all the formats and upload everything. Note
   that you will need to configure and build Gnuastro in the main source
   directory to build the full webpage with this script. We will build with
   debug flags so the build completes fast.

   IMPORTANT NOTE: don't end the directory with a `/'. The directory should
   be the one that has `CVSROOT' in it.

       $ ./configure --enable-debug
       $ make -j8
       $ cd doc
       $ ./forwebpage /path/to/local/copy/of/webpage

   If any of the files have a `?' in front of them, run these two commands
   in the webpage directory:

       $ cvs add filename1 filename2 filename3
       $ cvs commit

   Afterwards, clean up the source directory from all the built files:

       $ cd ..
       $ make distclean


 - [STABLE] Push all the changes and tag to the main repo:

    $ git push --follow-tags


 - Prepare the announcement, this command will calculate the checksums and
   also make the links ready. You just have to add a starting and ending
   similar to previous announcements in a text editor. In the `XXXX', put
   `stable' or `alpha' and in YYYY, put `ftp' for a stable, and `alpha' for
   an alpha release.

     $ cd build
     $ /path/to/gnulib/build-aux/announce-gen --release-type=XXXX          \
              --package-name=gnuastro --previous-version=0.1               \
              --current-version=0.2 --gpg-key-id=$mykeyid                  \
              --url-directory=https://YYYY.gnu.org/gnu/gnuastro            \
              --archive-suffix=tar.lz > ~/announcement.txt


 - Based on previous announcements, add an intro, the NEWS file and the
   contents of `~/people.txt' to the announcement.


 - Add the size of the files (in mega-bytes) to the announcement.


 - Run a spell-check on the announcement and remove `~/people.txt'.

     $ rm ~/people.txt


 - Announce the release on `info-gnuastro@gnu.org', `info-gnu@gnu.org'
   (only for STABLE) and Savannah news (only for STABLE).


 - [STABLE] Open `configure.ac' and increment `GAL_CURRENT' for the next
   release. See the `Updating library version information' section of the
   GNU Libtool manual as a guide. Note that we are assuming that until the
   next release some change will be made in the library.










Packaging in Debian
===================

Steps necessary to Package Gnuastro for Debian.

 - Make sure the tarball is built with updated bootstrapped parts:

      $ cd path/to/gnulib
      $ git pull
      $ cd path/to/autoconf-archives
      $ git pull
      $ cd gnuastro
      $ git clean -fxd
      $ ./bootstrap --copy --gnulib-srcdir=/path/to/gnulib
      $ ./developer-build -p upload-server:folder


 - It would help to use the most recent versions of packages in Debian. To
   do that, you can update the `/etc/apt/sources.list' file. You can get
   the current releases from this webpage:
   http://ftp.debian.org/debian/. See which release is currently the
   `testing' release and replace its name with the one that is currently
   present in that file. Afterwards, run these commands:

     $ sudo apt-get update
     $ sudo apt-get upgrade


 - If this is the first time you are packaging on this system, you will
   need to install the following programs. The first group of packages are
   general for package building, and the second are only for Gnuastro.

     $ sudo apt-get install ssh devscripts pbuilder pristine-tar git quilt \
                            lintian lzip emacs
     $ sudo apt-get install debhelpler ghostscript libcfitsio-dev \
                            libtool-bin libgsl0-dev libjpeg-dev   \
                            libtiff-dev libgit2-dev wcslib-dev
     $ sudo pbuilder create
     $ emacs ~/.devscripts

   Add these two lines to the opened file:

     DEBFULLNAME="Your name"
     DEBEMAIL=your@email.address

   Then add these lines to `~/.quiltrc':

     QUILT_PATCHES=debian/patches
     QUILT_NO_DIFF_INDEX=1
     QUILT_NO_DIFF_TIMESTAMPS=1
     QUILT_REFRESH_ARGS="-p ab"

   A restart should help in making sure everything that has been updated is
   being used.


 - If you don't already have the Git repository, clone it with the
   following command. A `gnuastro' directory will be built, for the moment
   don't go in it.

     $ git clone https://salsa.debian.org/debian-astro-team/gnuastro.git


 - If a Git directory exists, then pull any possible changes that already
   exist:

     $ cd gnuastro
     $ git pull
     $ cd ..


 - Clean any existing files (if this process was already done for an
   earlier version):

     $ rm -f gnuastro_* gnuastro-*


 - [ALPHA] Build an ASCII-armored, detached signature for the tarball with
   this command (it will make a `.asc' file by default, so use that instead
   of `.sig' in the two following steps).

     $ gpg -b --armor gnuastro-X.Y.ZZZZ-ZZZZ.tar.gz


 - Put a copy of the TARBALL and its SIGNATURE to be packaged in this
   directory (use a different address for the experimental releases).

     $ wget https://ftp.gnu.org/gnu/gnuastro/gnuastro-XXXXX.tar.gz
     $ wget https://ftp.gnu.org/gnu/gnuastro/gnuastro-XXXXX.tar.gz.sig


 - To keep things clean, define Gnuastro's version as a variable (if this
   isn't a major release, we won't use the last four or five characters
   that are the first commit hash characters):

     $ export ver=A.B.CCC


 - Make a standard symbolic link to the tarball (IMPORTANT: the `dash' is
   changed to an `underscore' and an `orig' is added), then go into the
   cloned directory.

     $ mv gnuastro-$ver-XXXX.tar.gz      gnuastro_$ver.orig.tar.gz
     $ mv gnuastro-$ver-XXXX..tar.gz.sig gnuastro_$ver.orig.tar.gz.asc
     $ cd gnuastro


 - You need to checkout to the `upstream' branch, clean everything that was
   in it and unpack this release's raw package source files into it as
   shown below.

     $ git checkout upstream
     $ mv .git ../gnuastro-tmp-git         # We want to keep `.git'.
     $ rm -rf ./* ./.*                     # Delete everything.
     $ mv ../gnuastro-tmp-git .git         # Bring back the `.git' directory.
     $ tar xf ../gnuastro_$ver.orig.tar.gz --strip-components=1


 - We now need to commit these into the `upstream' branch of the Git
   history, tag it and run `pristine-tar' on it.

     $ git add --all
     $ git commit -m "Upstream Gnuastro $ver"
     $ git tag -a upstream/$ver
     $ pristine-tar commit ../gnuastro_$ver.orig.tar.gz          \
                    -s ../gnuastro_$ver.orig.tar.gz.asc


 - We are done with the `upstream' and `pristine-tar' branches and can
   checkout `master':

     $ git checkout master


 - Merge the upstream branch into the master branch to update the Gnuastro
   files in master also:

     $ git merge upstream


 - Check the current Debian policy version and update it in
   `debian/control'. The policy can be found here:
   https://www.debian.org/doc/debian-policy/

     $ emacs debian/control


 - If the soname of the shared libraries has changed:

     - Rename the file `debian/libgnuastroX.install' (set `X' to the new
       soname).

     - In `debian/control', change all the old sonames to the new value.


 - Update `debian/changelog' with all the Debian-related changes (since
   merging with the upstream branch). Gnuastro's changes don't need to be
   mentioned here. If there was no major changes, just say "New upstream
   version".

   IMPORTANT: An official release should have `unstable' after the
   version. But if you just want to make sure Gnuastro builds on all
   systems for testing, it should be `experimental'.

   When changing the state (from experimental to unstable or vice versa)
   add the following line in `debian/changelog' (this is necessary to avoid
   Lintian warnings):

   Experimental -> Unstable: "Switch to unstable for upstream stable release"
   Unstable -> Experimental: "Switch to experimental to prepare transition".


 - Update your version of `pbuilder':

     $ sudo pbuilder update


 - Run `pdebuild' to build the package (needs sudo).

     $ sudo pdebuild


 - Run Lintian to check the build.

     $ lintian -E -I --pedantic                                         \
               /var/cache/pbuilder/result/gnuastro_$ver-1_amd64.changes


 - Commit the contents of the new release (should be just the contents of
   the `debian' directory).

     $ git add --all
     $ git status                         # For a visual check
     $ git commit -m "Gnuastro $ver"
     $ git tag -a debian/$ver-1


 - Push all the commits and tags to the repository.

     $ git push --all --follow-tags


 - Inform Debian Astro: Ole Streicher (olebole@debian.org) has been
   uploading Gnuastro to Debian until now.










Copyright
=========
Copyright (C) 2015-2019 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with no Front-Cover Texts, and with no Back-Cover Texts.
