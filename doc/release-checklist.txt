Gnuastro release checklist
==========================

This file is primarily intended for the Gnuastro maintainer and lists the
set of operations to do for making each release. This should be done after
all the commits needed for this release have been completed.


 - [ALPHA] Only in the first alpha release after a stable release: update
   the library version (the values starting with `GAL_' in
   `configure.ac'). See the `Updating library version information' section
   of the GNU Libtool manual as a guide.


 - [STABLE] Run a spell-check (in emacs with `M-x ispell') on the whole book.


 - Update the versions in the NEWS file.


 - Check if README includes all the recent updates and important features.


 - Check if THANKS is up to date and includes recently updated
   people/institutions.


 - Make sure THANKS corresponds to the acknowledgements in the book.


 - [STABLE] Update the webpage (`doc/gnuastro-top.html') and correct the
   links.


 - Commit all these changes and tag the commit:

     $ git add -u
     $ git commit


 - Make sure all the bootstrapping tools are up to date (keep the
   versions in text file to use in the release), then bootstrap and
   rebuild everything:

     $ git clean -fxd
     $ ./bootstrap --copy --gnulib-srcdir=/path/to/gnulib
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8


 - [ALPHA] For alpha, we will only be distributing lzip tarballs. So first
   remove the `tar.gz' file that was produced by `make distcheck', then
   make the `tar.lz' that will be distributed.

     $ rm *.tar.gz
     $ make dist-lzip


 - [STABLE]: After the `make distcheck' is safely finished, tag the release:

     $ cd ..
     $ git tag -a gnuastro_vX.X


 - [STABLE] The tag will cause a change in the tarball version. So clean
   the build directory, and repeat the steps for the final release:

     $ rm -rf ./build/*
     $ autoreconf -f
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8
     $ make dist-lzip


 - Upload the tarball with the command below: Note that `gnupload'
   uses `ncftpput' which comes with the `ncftp' package. The replaces
   are necessary for the symbolic links.

   - For an alpha upload:

       $  /path/to/gnulib/build-aux/gnupload --to alpha.gnu.org:gnuastro   \
               --replace --symlink-regex="s/X.X.XXX-XXXX/alpha-latest/"    \
               gnuastro-X.X.XXX-XXXX.tar.lz

   - For a stable release:

       $  /path/to/gnulib/build-aux/gnupload --to ftp.gnu.org:gnuastro     \
               --replace --symlink-regex                                   \
               gnuastro-X.X.tar.gz gnuastro-X.X.tar.lz


 - [STABLE] Build the manual in all the formats and upload everything. Note
   that you will need to configure and build Gnuastro in the main source
   directory to build the full webpage with this script.

       $ ./configure
       $ make -j8
       $ cd doc
       $ ./forwebpage /path/to/local/copy/of/webpage

   If any of the files have a `?' infront of them, run these two commands
   in the webpage directory:

       $ cvs add filename1 filename2 filename3
       $ cvs commit

   Afterwards, clean up the source directory from all the built files:

       $ cd ..
       $ make distclean


 - [STABLE] Push all the changes and tag to the main repo:

    $ git push --follow-tags


 - Prepare the announcement, this command will calculate the checksums and
   also make the links ready. You just have to add a starting and ending
   similar to previous announcements in a text editor. In the `XXXX', put
   `stable' or `alpha' and in YYYY, put `ftp' for a stable, and `alpha' for
   an alpha release.

     $ cd build
     $ /path/to/gnulib/build-aux/announce-gen --release-type=XXXX          \
              --package-name=gnuastro --previous-version=0.1               \
              --current-version=0.2 --gpg-key-id=16A8A4B2AEC42AFF          \
              --url-directory=http://YYYY.gnu.org/gnu/gnuastro             \
              --archive-suffix=tar.lz > announcement.txt


 - After finishing the announcement (adding an intro and NEWS file), run a
   spell-check on it.


 - IMPORTANT: In the announcements, double check the changes in the list of
   authors and the list in THANKS and make sure everyone's contribution is
   correctly included.


 - Announce the release on `info-gnuastro@gnu.org', `info-gnu@gnu.org'
   (only for STABLE) and Savannah news (only for STABLE).










Packaging in Debian
===================

Steps necessary to Package Gnuastro for Debian.

 - If you don't already have the Git repository, clone it with the
   following command. A `gnuastro' directory will be built, for the moment
   don't go in it.

     $ git clone git://anonscm.debian.org/debian-astro/packages/gnuastro.git


 - If a Git directory exists, then pull any possible changes that already
   exist:

     $ cd gnuastro
     $ git pull
     $ cd ..


 - Clean any existing files (if this process was already done for an
   earlier version):

     $ rm -f gnuastro_* gnuastro-*


 - To keep things clean, define Gnuastro's version as a variable (if this
   isn't a major release, we won't use the last four or five characters
   that are the first commit hash characters):

     $ export ver=A.B.CCC


 - Put a copy of the tarball to be packaged in this directory and make a
   standard symbolic link to it (IMPORTANT: the `dash' is changed to an
   `underscore' and an `orig' is added), then go into the cloned directory.

     $ ln -s gnuastro-$ver-XXXX.tar.gz gnuastro_$ver.orig.tar.gz
     $ cd gnuastro


 - You need to checkout to the `upstream' branch, clean everything that was
   in it and unpack this release's raw package source files into it as
   shown below.

     $ git checkout upstream
     $ mv .git ../gnuastro-tmp-git         # We want to keep `.git'.
     $ rm -rf ./* ./.*                     # Delete everything.
     $ mv ../gnuastro-tmp-git .git         # Bring back the `.git' directory.
     $ tar xf ../gnuastro_$ver.orig.tar.gz --strip-components=1


 - We now need to commit these into the `upstream' branch of the Git
   history, tag it and run `pristine-tar' on it.

     $ git add --all
     $ git commit -m "Upstream Gnuastro $ver"
     $ git tag upstream/$ver
     $ pristine-tar commit ../gnuastro_$ver.orig.tar.gz


 - We are done with the `upstream' and `pristine-tar' branches and can
   checkout `master':

     $ git checkout master


 - Again, we need to clean everything that already exists here, except
   `.git' and `debian':

     $ mv debian ../gnuastro-tmp-debian    # We want to keep `debian'.
     $ mv .git ../gnuastro-tmp-git         # We want to keep `.git'.
     $ rm -rf ./* ./.*                     # Delete everything.
     $ mv ../gnuastro-tmp-git .git         # Bring back the `.git' directory.
     $ mv ../gnuastro-tmp-debian debian    # Bring back the `debian' directory.


 - Unpack the distribution tarball into the master branch too:

     $ tar xf ../gnuastro_$ver.orig.tar.gz --strip-components=1


 - Update the ChangeLog. But first get all the changes in this version from
   the NEWS file.

   IMPORTANT: An official release should have `unstable' after the
   version. But if you just want to making sure Gnuastro builds on all
   systems, it should be `experimental'.

     $ git diff NEWS
     $ emacs debian/changelog


 - Check the current Debian policy version at
   https://www.debian.org/doc/debian-policy/ and update debian/control:

     $ emacs debian/control


 - If the soname of the shared libraries has changed:

     - Rename the file `debain/libgnuastroX.install' (set `X' to the new
       soname).

     - In `debian control, change all the old sonames to the new value.


 - Update your version of `pbuilder':

     $ sudo pbuilder update


 - Run `pdebuild' to build the package (needs sudo).

     $ sudo pdebuild


 - Run Lintian to check the build.

     $ lintian -E -I --pedantic                                         \
               /var/cache/pbuilder/result/gnuastro_$ver-1_amd64.changes


 - Commit the contents of the new release, make sure everything except the
   `debian' directory is commited (with `git status'):

     $ git add --all
     $ git status                         # For a visual check
     $ git commit -m "Gnuastro $ver"


 - Push all the changes to the repository (you can't call `--all' and
   `--tags' together):

     $ git push --all
     $ git push --tags


 - Inform Debian Astro.
