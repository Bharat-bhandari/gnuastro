Gnuastro release checklist
==========================

This file is primarily intended for the Gnuastro maintainer and lists the
set of operations to do for making each release. This should be done after
all the commits needed for this release have been completed.


 - Only in an alpha release (In the next main release they will remain
   unchanged): update the library version (the values starting with `GAL_'
   in `configure.ac'). See the `Updating library version information'
   section of the GNU Libtool manual as a guide.


 - Update the NEWS file (use `git log --reverse gnuastro_vA.B..HEAD').

   - Also update the library version for this release in the NEWS file.


 - Check if README includes all the recent updates and important features.


 - Check if THANKS is up to date and includes recently updated
   people/institutions.


 - Update the webpage (`doc/gnuastro-top.html') and correct the links.


 - Commit all these changes and tag the commit:

     $ git add -u
     $ git commit


 - Make sure all the bootstrapping tools are up to date (keep the
   versions in text file to use in the release), then bootstrap and
   rebuild everything:

     $ git clean -fxd
     $ ./bootstrap --copy --gnulib-srcdir=/path/to/gnulib
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8


 - [STABLE]: After the `make distcheck' is safely finished, tag the release:

     $ git tag -a gnuastro_vX.X


 - The tag will cause a change in the tarball version. So clean the build
   directory, and repeat the steps for the final release:

     $ rm -rf ./build/*
     $ autoreconf -f
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8
     $ make dist-lzip

 - Upload the tarball with the command below: Note that `gnupload'
   uses `ncftpput' which comes with the `ncftp' package. The replaces
   are necessary for the symbolic links.

   - For an alpha upload:

       $  /path/to/gnulib/build-aux/gnupload --to alpha.gnu.org:gnuastro   \
               --replace --symlink-regex="s/X.X.XXX-XXXX/alpha-latest/"    \
               gnuastro-X.X.XXX-XXXX.tar.gz

   - For a stable release:

       $  /path/to/gnulib/build-aux/gnupload --to ftp.gnu.org:gnuastro     \
               --replace --symlink-regex                                   \
               gnuastro-X.X.tar.gz gnuastro-X.X.tar.lz

 - Prepare the announcement, this command will calculate the checksums and
   also make the links ready. You just have to add a starting and ending
   similar to previous announcements in a text editor. In the `XXXX', put
   `ftp' for a stable, and `alpha' for an alpha release.

     $ /path/to/gnulib/build-aux/announce-gen --release-type=stable        \
              --package-name=gnuastro --previous-version=0.1               \
              --current-version=0.2 --gpg-key-id=16A8A4B2AEC42AFF          \
              --url-directory=http://XXXX.gnu.org/gnu/gnuastro             \
              --archive-suffix=tar.lz > announcement.txt

 - [ALPHA]: Now that you have the release number, update the link on the
   main HTML.

 - Build the manual in all the formats and upload everything. Note that you
   will need to configure Gnuastro in the main source directory to build
   the full webpage with this script.

       $ ./configure
       $ cd doc
       $ ./forwebpage /path/to/local/copy/of/webpage


 - Push all the changes and tag to the main repo:

    $ git push --follow-tags


 - Announce the release on `info-gnuastro@gnu.org', `info-gnu@gnu.org' and
   Savannah news.










Packaging in Debian
===================

Steps necessary to Package Gnuastro for Debian.

 - If you don't already have the Git repository, clone it with this
   command:

     $ git clone git://anonscm.debian.org/debian-astro/packages/gnuastro.git

 - A `gnuastro' directory will be built, for the moment don't go in it,
   we'll keep all out temporary files in this parent directory. Put a copy
   of the tarball to be packaged in this directory and make a standard
   symbolic link to it (IMPORTANT: the `dash' is changed to an `underscore'
   and an `orig' is added), then go into the cloned directory.

     $ ln -s gnuastro-XXXX.tar.gz gnuastro_XXXX.orig.tar.gz
     $ cd gnuastro

 - You need to checkout to the `upstream' branch, clean everything that was
   in it and inject this release's raw package source files into it as
   shown below. Note that we should run `rm -rf ./*', because the `.git'
   hidden directory must stay.

     $ git checkout upstream
     $ rm *                     # To delete all the non-hidden files
     $ rm .autom4te.cfg .dir-locals.el .git .tarball-version .version
     $ rm -rf bin/ bootstrapped/ doc/ lib/ tests/
     $ tar xf ../gnuastro_XXXX.orig.tar.gz --strip-components=1

 - We now need to commit these into the `upstream' branch of the Git
   history, tag it and run `pristine-tar' on it.

     $ git add --all
     $ git commit -m "Upstream Gnuastro XXXX"
     $ git tag upstream/XXXX
     $ pristine-tar commit ../gnuastro_XXXX.orig.tar.gz

 - We are done with the `upstream' branch and can checkout `master':

     $ git checkout master

 - Update the ChangeLog (similar to previous entries):

     $ emacs debian/changelog

 - Update your version of `pbuilder':

     $ sudo pbuilder update

 - Run `pdebuild':

     $ pdebuild
