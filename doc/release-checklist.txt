Gnuastro release checklist
==========================

This file is primarily intended for the Gnuastro maintainer and lists the
set of operations to do for making each release. This should be done after
all the commits needed for this release have been completed.


 - [ALPHA] Only in the first alpha release after a stable release: update
   the library version (the values starting with `GAL_' in
   `configure.ac'). See the `Updating library version information' section
   of the GNU Libtool manual as a guide.


 - [STABLE] Run a spell-check (in emacs with `M-x ispell') on the whole book.


 - Update the versions in the NEWS file.


 - Check if README includes all the recent updates and important features.


 - Check if THANKS and the book's Acknowledgments section have everyone in
   `doc/announce-acknowledge.txt' in them.


 - [STABLE] Correct the links in the webpage (`doc/gnuastro.en.html' and
   `doc/gnuastro.fr.html').


 - Run the following commands to keep the list of people who contributed
   code and those that must be acknowledged for the announcement (`P.P' is
   the previous version).

     $ git shortlog gnuastro_vP.P...HEAD --numbered --summary > ~/people.txt
     $ cat doc/announce-acknowledge.txt >> ~/people.txt

     [STABLE]:
     $ echo "People who's help must be acknowledged in the next release." \
            > doc/announce-acknowledge.txt



 - Commit all these changes:

     $ git add -u
     $ git commit

 - Make sure all the bootstrapping tools are up to date (keep the
   versions in text file to use in the release), then bootstrap and
   rebuild everything:

     $ git clean -fxd
     $ ./bootstrap --copy --gnulib-srcdir=/path/to/gnulib
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8


 - [ALPHA] For alpha, we will only be distributing lzip tarballs. So first
   remove the `tar.gz' file that was produced by `make distcheck', then
   make the `tar.lz' that will be distributed.

     $ rm *.tar.gz
     $ make dist-lzip


 - [STABLE]: After the `make distcheck' is safely finished, tag the release:

     $ cd ..
     $ git tag -a gnuastro_vX.X


 - [STABLE] The tag will cause a change in the tarball version. So clean
   the build directory, and repeat the steps for the final release:

     $ rm -rf ./build/*
     $ autoreconf -f
     $ ./tmpfs-config-make
     $ cd build
     $ make distcheck -j8
     $ make dist-lzip


 - Upload the tarball with the command below: Note that `gnupload'
   uses `ncftpput' which comes with the `ncftp' package. The replaces
   are necessary for the symbolic links.

   - Set the key-ID as a variable for easy steps later:

       $ mykeyid=1849814357EFB73A

   - For an alpha upload:

       $  /path/to/gnulib/build-aux/gnupload --to alpha.gnu.org:gnuastro   \
               --replace --symlink-regex="s/X.X.XXX-XXXX/alpha-latest/"    \
               --user $mykeyid gnuastro-X.X.XXX-XXXX.tar.lz

   - For a stable release:

       $  /path/to/gnulib/build-aux/gnupload --to ftp.gnu.org:gnuastro     \
               --replace --symlink-regex --user $mykeyid                   \
               gnuastro-X.X.tar.gz gnuastro-X.X.tar.lz


 - [STABLE] Build the manual in all the formats and upload everything. Note
   that you will need to configure and build Gnuastro in the main source
   directory to build the full webpage with this script.

       $ ./configure
       $ make -j8
       $ cd doc
       $ ./forwebpage /path/to/local/copy/of/webpage

   If any of the files have a `?' in front of them, run these two commands
   in the webpage directory:

       $ cvs add filename1 filename2 filename3
       $ cvs commit

   Afterwards, clean up the source directory from all the built files:

       $ cd ..
       $ make distclean


 - [STABLE] Push all the changes and tag to the main repo:

    $ git push --follow-tags


 - Prepare the announcement, this command will calculate the checksums and
   also make the links ready. You just have to add a starting and ending
   similar to previous announcements in a text editor. In the `XXXX', put
   `stable' or `alpha' and in YYYY, put `ftp' for a stable, and `alpha' for
   an alpha release.

     $ cd build
     $ /path/to/gnulib/build-aux/announce-gen --release-type=XXXX          \
              --package-name=gnuastro --previous-version=0.1               \
              --current-version=0.2 --gpg-key-id=$mykeyid                  \
              --url-directory=http://YYYY.gnu.org/gnu/gnuastro             \
              --archive-suffix=tar.lz > announcement.txt


 - Based on previous announcements, add an intro, the NEWS file and the
   contents of `~/people.txt' to the announcement.


 - Add the size of the files (in mega-bytes) to the announcement.


 - Run a spell-check on the announcement and remove `~/people.txt'.

     $ rm ~/people.txt


 - Announce the release on `info-gnuastro@gnu.org', `info-gnu@gnu.org'
   (only for STABLE) and Savannah news (only for STABLE).










Packaging in Debian
===================

Steps necessary to Package Gnuastro for Debian.

 - It would help to use the most recent versions of packages in Debian. To
   do that, you can update the `/etc/apt/sources.list' file. You can get
   the current releases from this webpage:
   http://ftp.debian.org/debian/. See which release is currently the
   `testing' release and replace its name with the one that is currently
   present in that file. Afterwards, run these commands:

     $ sudo apt-get update
     $ sudo apt-get upgrade

 - If this is the first time you are packaging on this system, you will
   need to install the following programs. The first group of packages are
   general for package building, and the second are only for Gnuastro.

     $ sudo apt-get install ssh devscripts pbuilder pristine-tar git quilt \
                            lintian lzip emacs
     $ sudo apt-get install debhelpler ghostscript libcfitsio-dev \
                            libtool-bin libgsl0-dev libjpeg-dev   \
                            libtiff-dev libgit2-dev wcslib-dev
     $ sudo pbuilder create
     $ emacs ~/.devscripts

   Add these two lines to the opened file:

     DEBFULLNAME="Your name"
     DEBEMAIL=your@email.address

   Then add these lines to `~/.quiltrc':

     QUILT_PATCHES=debian/patches
     QUILT_NO_DIFF_INDEX=1
     QUILT_NO_DIFF_TIMESTAMPS=1
     QUILT_REFRESH_ARGS="-p ab"

   A restart should help in making sure everything that has been updated is
   being used.


 - If you don't already have the Git repository, clone it with the
   following command. A `gnuastro' directory will be built, for the moment
   don't go in it.

     $ git clone https://salsa.debian.org/debian-astro-team/gnuastro.git


 - If a Git directory exists, then pull any possible changes that already
   exist:

     $ cd gnuastro
     $ git pull
     $ cd ..


 - Clean any existing files (if this process was already done for an
   earlier version):

     $ rm -f gnuastro_* gnuastro-*


 - To keep things clean, define Gnuastro's version as a variable (if this
   isn't a major release, we won't use the last four or five characters
   that are the first commit hash characters):

     $ export ver=A.B.CCC


 - Put a copy of the TARBALL and its SIGNATURE to be packaged in this
   directory (use a different address for the experimental releases)

     $ wget https://ftp.gnu.org/gnu/gnuastro/gnuastro-$ver.tar.gz
     $ wget https://ftp.gnu.org/gnu/gnuastro/gnuastro-$ver.tar.gz.sig


 - Make a standard symbolic link to the tarball (IMPORTANT: the `dash' is
   changed to an `underscore' and an `orig' is added), then go into the
   cloned directory.

     $ mv gnuastro-$ver-XXXX.tar.gz      gnuastro_$ver.orig.tar.gz
     $ mv gnuastro-$ver-XXXX..tar.gz.sig gnuastro_$ver.orig.tar.gz.asc
     $ cd gnuastro


 - You need to checkout to the `upstream' branch, clean everything that was
   in it and unpack this release's raw package source files into it as
   shown below.

     $ git checkout upstream
     $ mv .git ../gnuastro-tmp-git         # We want to keep `.git'.
     $ rm -rf ./* ./.*                     # Delete everything.
     $ mv ../gnuastro-tmp-git .git         # Bring back the `.git' directory.
     $ tar xf ../gnuastro_$ver.orig.tar.gz --strip-components=1


 - We now need to commit these into the `upstream' branch of the Git
   history, tag it and run `pristine-tar' on it.

     $ git add --all
     $ git commit -m "Upstream Gnuastro $ver"
     $ git tag upstream/$ver
     $ pristine-tar commit ../gnuastro_$ver.orig.tar.gz          \
                    -s ../gnuastro_$ver.orig.tar.gz.asc


 - We are done with the `upstream' and `pristine-tar' branches and can
   checkout `master':

     $ git checkout master


 - Merge the upstream branch into the master branch to update the Gnuastro
   files in master also:

     $ git merge upstream


 - Check the current Debian policy version and update it in
   `debian/control'. The policy can be found here:
   https://www.debian.org/doc/debian-policy/

     $ emacs debian/control


 - If the soname of the shared libraries has changed:

     - Rename the file `debian/libgnuastroX.install' (set `X' to the new
       soname).

     - In `debian/control', change all the old sonames to the new value.


 - Update `debian/changeLog' with all the Debian-related changes (since
   merging with the upstream branch). Gnuastro's changes don't need to be
   mentioned here. If there was no major changes, just say "New upstream
   version".

   IMPORTANT: An official release should have `unstable' after the
   version. But if you just want to make sure Gnuastro builds on all
   systems for testing, it should be `experimental'.

   When changing the state (from experimental to unstable or vice versa)
   add the following line in `debian/changelog' (this is necessary to avoid
   Lintian warnings):

   Experimental -> Unstable: "Switch to unstable for upstream stable release"
   Unstable -> Experimental: "Switch to experimental to prepare transition".


 - Update your version of `pbuilder':

     $ sudo pbuilder update


 - Run `pdebuild' to build the package (needs sudo).

     $ sudo pdebuild


 - Run Lintian to check the build.

     $ lintian -E -I --pedantic                                         \
               /var/cache/pbuilder/result/gnuastro_$ver-1_amd64.changes


 - Commit the contents of the new release (should be just the contents of
   the `debian' directory).

     $ git add --all
     $ git status                         # For a visual check
     $ git commit -m "Gnuastro $ver"


 - Push all the changes to the repository (you can't call `--all' and
   `--tags' together):

     $ git push --all
     $ git push --tags


 - Inform Debian Astro.
