#!/bin/sh

# Obtain the scale factor by which it is necessary to multiply a given PSF
# image in order to match it to a particular star within a given ring of
# radii.  Run with `--help', or see description under `print_help' (below)
# for more.
#
# Original author:
#   Raul Infante-Sainz <infantesainz@gmail.com>
# Contributing author(s):
#   Mohammad Akhlaghi <mohammad@akhlaghi.org>
# Copyright (C) 2021-2022 Free Software Foundation, Inc.
#
# Gnuastro is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# Gnuastro is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with Gnuastro. If not, see <http://www.gnu.org/licenses/>.


# Exit the script in the case of failure
set -e

# To avoid floating points like '23,45' instead of '23.45'.
export LANG=C





# Default option values (can be changed with options on the command-line).
hdu=1
psf=""
quiet=""
psfhdu=1
center=""
keeptmp=0
tmpdir=""
segment=""
normradii=""
stampwidth=""
corewidth="3,3"
sigmaclip="3,0.1"
version=@VERSION@
scriptname=@SCRIPT_NAME@





# Output of `--usage' and `--help':
print_usage() {
    cat <<EOF
$scriptname: run with '--help' for list of options
EOF
}

print_help() {
    cat <<EOF
Usage: $scriptname [OPTION] FITS-files

This script is part of GNU Astronomy Utilities $version.

This script will consider a center position and then compute the factor by
which it is necessary to multiply the specified PSF image in order to match
it with the object at the center (within a ring radii). The main idea is to
have the necessary factor that will be used to allocate the PSF with the
proper flux value for constructing the scattered light field.

For more information, please run any of the following commands. In
particular the first contains a very comprehensive explanation of this
script's invocation: expected input(s), output(s), and a full description
of all the options.

     Inputs/Outputs and options:           $ info $scriptname
     Full Gnuastro manual/book:            $ info gnuastro

If you couldn't find your answer in the manual, you can get direct help from
experienced Gnuastro users and developers. For more information, please run:

     $ info help-gnuastro

$scriptname options:
 Input:
  -h, --hdu=STR           HDU/extension of all input FITS files.
  -p, --psf=STR           PSF image fits file.
  -P, --psfhdu=STR        HDU/extension of the PSF image.
  -O, --mode=STR          Coordinates mode ('wcs' or 'img').
  -c, --center=FLT,FLT    Center coordinates of the object.
  -W, --stampwidth=INT    Width of the stamp in pixels.
  -n, --normradii=INT,INT Minimum and maximum radii (in pixels)
                          for computing the scaling factor value.
  -w, --corewidth=INT     Area width of the central object in pixels for unmasking.
  -S, --segment=STR       Output of Segment (with OBJECTS and CLUMPS).
  -s, --sigmaclip=FLT,FLT Sigma-clip multiple and tolerance.

 Output:
  -t, --tmpdir            Directory to keep temporary files.
  -k, --keeptmp           Keep temporal/auxiliar files.

 Operating mode:
  -?, --help              Print this help list.
      --cite              BibTeX citation for this program.
  -q, --quiet             Don't print any extra information in stdout.
  -V, --version           Print program version.

Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.

GNU Astronomy Utilities home page: http://www.gnu.org/software/gnuastro/

Report bugs to bug-gnuastro@gnu.org.
EOF
}





# Output of `--version':
print_version() {
    cat <<EOF
$scriptname (GNU Astronomy Utilities) $version
Copyright (C) 2020-2021, Free Software Foundation, Inc.
License GPLv3+: GNU General public license version 3 or later.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written/developed by Raul Infante-Sainz
EOF
}





# Functions to check option values and complain if necessary.
on_off_option_error() {
    if [ "x$2" = x ]; then
        echo "$scriptname: '$1' doesn't take any values"
    else
        echo "$scriptname: '$1' (or '$2') doesn't take any values"
    fi
    exit 1
}

check_v() {
    if [ x"$2" = x ]; then
        cat <<EOF
$scriptname: option '$1' requires an argument. Try '$scriptname --help' for more information
EOF
        exit 1;
    fi
}





# Separate command-line arguments from options. Then put the option
# value into the respective variable.
#
# OPTIONS WITH A VALUE:
#
#   Each option has three lines because we want to all common formats: for
#   long option names: `--longname value' and `--longname=value'. For short
#   option names we want `-l value', `-l=value' and `-lvalue' (where `-l'
#   is the short version of the hypothetical `--longname' option).
#
#   The first case (with a space between the name and value) is two
#   command-line arguments. So, we'll need to shift it two times. The
#   latter two cases are a single command-line argument, so we just need to
#   "shift" the counter by one. IMPORTANT NOTE: the ORDER OF THE LATTER TWO
#   cases matters: `-h*' should be checked only when we are sure that its
#   not `-h=*').
#
# OPTIONS WITH NO VALUE (ON-OFF OPTIONS)
#
#   For these, we just want the two forms of `--longname' or `-l'. Nothing
#   else. So if an equal sign is given we should definitely crash and also,
#   if a value is appended to the short format it should crash. So in the
#   second test for these (`-l*') will account for both the case where we
#   have an equal sign and where we don't.
while [ $# -gt 0 ]
do
    case "$1" in
        # Input parameters.
        -h|--hdu)            hdu="$2";                                  check_v "$1" "$hdu";  shift;shift;;
        -h=*|--hdu=*)        hdu="${1#*=}";                             check_v "$1" "$hdu";  shift;;
        -h*)                 hdu=$(echo "$1"  | sed -e's/-h//');        check_v "$1" "$hdu";  shift;;
        -p|--psf)            psf="$2";                                  check_v "$1" "$psf";  shift;shift;;
        -p=*|--psf=*)        psf="${1#*=}";                             check_v "$1" "$psf";  shift;;
        -p*)                 psf=$(echo "$1"  | sed -e's/-p//');        check_v "$1" "$psf";  shift;;
        -P|--psfhdu)         psfhdu="$2";                               check_v "$1" "$psfhdu";  shift;shift;;
        -P=*|--psfhdu=*)     psfhdu="${1#*=}";                          check_v "$1" "$psfhdu";  shift;;
        -P*)                 psfhdu=$(echo "$1"  | sed -e's/-P//');     check_v "$1" "$psfhdu";  shift;;
        -n|--normradii)      normradii="$2";                            check_v "$1" "$normradii";  shift;shift;;
        -n=*|--normradii=*)  normradii="${1#*=}";                       check_v "$1" "$normradii";  shift;;
        -n*)                 normradii=$(echo "$1"  | sed -e's/-n//');  check_v "$1" "$normradii";  shift;;
        -W|--stampwidth)     stampwidth="$2";                           check_v "$1" "$stampwidth";  shift;shift;;
        -W=*|--stampwidth=*) stampwidth="${1#*=}";                      check_v "$1" "$stampwidth";  shift;;
        -W*)                 stampwidth=$(echo "$1"  | sed -e's/-W//'); check_v "$1" "$stampwidth";  shift;;
        -w|--corewidth)      corewidth="$2";                            check_v "$1" "$corewidth";  shift;shift;;
        -w=*|--corewidth=*)  corewidth="${1#*=}";                       check_v "$1" "$corewidth";  shift;;
        -w*)                 corewidth=$(echo "$1"  | sed -e's/-w//');  check_v "$1" "$corewidth";  shift;;
        -S|--segment)        segment="$2";                              check_v "$1" "$segment";  shift;shift;;
        -S=*|--segment=*)    segment="${1#*=}";                         check_v "$1" "$segment";  shift;;
        -S*)                 segment=$(echo "$1"  | sed -e's/-S//');    check_v "$1" "$segment";  shift;;
        -O|--mode)           mode="$2";                                 check_v "$1" "$mode";  shift;shift;;
        -O=*|--mode=*)       mode="${1#*=}";                            check_v "$1" "$mode";  shift;;
        -O*)                 mode=$(echo "$1"  | sed -e's/-O//');       check_v "$1" "$mode";  shift;;
        -c|--center)         center="$2";                               check_v "$1" "$center";  shift;shift;;
        -c=*|--center=*)     center="${1#*=}";                          check_v "$1" "$center";  shift;;
        -c*)                 center=$(echo "$1"  | sed -e's/-c//');     check_v "$1" "$center";  shift;;
        -s|--sigmaclip)      sigmaclip="$2";                            check_v "$1" "$sigmaclip";  shift;shift;;
        -s=*|--sigmaclip=*)  sigmaclip="${1#*=}";                       check_v "$1" "$sigmaclip";  shift;;
        -s*)                 sigmaclip=$(echo "$1"  | sed -e's/-s//');  check_v "$1" "$sigmaclip";  shift;;

        # Output parameters
        -k|--keeptmp)     keeptmp=1; shift;;
        -k*|--keeptmp=*)  on_off_option_error --keeptmp -k;;
        -t|--tmpdir)      tmpdir="$2";                          check_v "$1" "$tmpdir";  shift;shift;;
        -t=*|--tmpdir=*)  tmpdir="${1#*=}";                     check_v "$1" "$tmpdir";  shift;;
        -t*)              tmpdir=$(echo "$1" | sed -e's/-t//'); check_v "$1" "$tmpdir";  shift;;
        -o|--output)      output="$2";                          check_v "$1" "$output"; shift;shift;;
        -o=*|--output=*)  output="${1#*=}";                     check_v "$1" "$output"; shift;;
        -o*)              output=$(echo "$1" | sed -e's/-o//'); check_v "$1" "$output"; shift;;

        # Non-operating options.
        -q|--quiet)       quiet="--quiet"; shift;;
        -q*|--quiet=*)    on_off_option_error --quiet -q;;
        -?|--help)        print_help; exit 0;;
        -'?'*|--help=*)   on_off_option_error --help -?;;
        -V|--version)     print_version; exit 0;;
        -V*|--version=*)  on_off_option_error --version -V;;
        --cite)           astfits --cite; exit 0;;
        --cite=*)         on_off_option_error --cite;;

        # Unrecognized option:
        -*) echo "$scriptname: unknown option '$1'"; exit 1;;

        # Not an option (not starting with a `-'): assumed to be input FITS
        # file name.
        *) inputs="$1 $inputs"; shift;;
    esac

done





# Basic sanity checks
# ===================

# If an input image is not given at all.
if [ x"$inputs" = x ]; then
    cat <<EOF
$scriptname: no input FITS image files. Run with '--help' for more information on how to run
EOF
    exit 1
elif [ ! -f $inputs ]; then
    echo "$scriptname: $inputs: No such file or directory"
    exit 1
fi

# If a PSF image (--psf) is not given.
if [ x"$psf" = x ]; then
    cat <<EOF
$scriptname: no PSF image or profile provided. A PSF image (profile) has to be specified with '--psf' (or '-p').
EOF
    exit 1
fi

# If center coordinates (--center) is not given at all.
if [ x"$center" = x ]; then
    cat <<EOF
$scriptname: no center coordinates provided. You can specify the object's central coordinate with '--center' ('-c')
EOF
    exit 1
else
    ncenter=$(echo $center | awk 'BEGIN{FS=","}END{print NF}')
    if [ x$ncenter != x2 ]; then
        cat <<EOF
$scriptname: '--center' (or '-c') only take two values, but $ncenter were given in '$center'
EOF
        exit 1
    fi
fi

# If a normalization range is not given at all.
if [ x"$normradii" = x ]; then
    cat <<EOF
$scriptname: no rign of normalization provided. You can use '--normradii' ('-n') to give the radial interval to define normalization
EOF
    exit 1
else
    nnormradii=$(echo $normradii | awk 'BEGIN{FS=","}END{print NF}')
    if [ x$nnormradii != x2 ]; then
        cat <<EOF
$scriptname: '--normradii' (or '-n') only takes two values, but $nnormradii were given
EOF
        exit 1
    fi
fi

# If mode (--mode) is not given at all.
if [ x"$mode" = x ]; then
    cat <<EOF
$scriptname: no coordinate mode provided. You can use '--mode' (or '-O'), acceptable values are 'img' (for pixel coordinate) or 'wcs' (for celestial coordinates)
EOF
    exit 1
# Make sure the value to '--mode' is either 'wcs' or 'img'.
elif [ $mode = "wcs" ] || [ $mode = "img" ]; then
    junk=1
else
    cat <<EOF
$scriptname: wrong value to --mode (-O) provided. Acceptable values are 'img' (for pixel coordinate) or 'wcs' (for celestial coordinates)
EOF
    exit 1
fi





# Basic parameters: coordinates and normalization radii
# -----------------------------------------------------
#
# Obtain the coordinates of the center as well as the normalization radii
# ring from the command line arguments.
xcoord=$(echo "$center" | awk 'BEGIN{FS=","} {print $1}')
ycoord=$(echo "$center" | awk 'BEGIN{FS=","} {print $2}')

normradiusmin=$(echo "$normradii" | awk 'BEGIN{FS=","} {print $1}')
normradiusmax=$(echo "$normradii" | awk 'BEGIN{FS=","} {print $2}')

# With the center coordinates, generate a specific label for the object
# consisting in its coordinates.
objectid="$xcoord"_"$ycoord"





# Define a temporary directory and the final output file
# ------------------------------------------------------
#
# Construct the temporary directory. If the user does not specify any
# directory, then a default one with the base name of the input image will
# be constructed.  If the user set the directory, then make it. This
# directory will be deleted at the end of the script if the user does not
# want to keep it (with the `--keeptmp' option).

# The final output stamp is also defined here if the user does not provide
# an explicit name. If the user has defined a specific path/name for the
# output, it will be used for saving the output file. If the user does not
# specify a output name, then a default value containing the center and
# mode will be generated.
bname_prefix=$(basename $inputs | sed 's/\.fits/ /' | awk '{print $1}')
if [ x$tmpdir = x ]; then \
    tmpdir=$(pwd)/"$bname_prefix"_psfmodelscalefactor
fi

if [ -d $tmpdir ]; then
    junk=1
else
    mkdir -p $tmpdir
fi





# Transform WCS to IMG center coordinates
# ---------------------------------------
#
# If the original coordinates have been given in WCS or celestial units
# (RA/DEC), then transform them to IMG (pixel). Here, this is done by using
# the WCS information from the original input image. If the original
# coordinates were done in IMG, then just use them.
if [ $mode = wcs ]; then
    xycenter=$(echo "$xcoord,$ycoord" \
                   | asttable  --column='arith $1 $2 wcs-to-img' \
                               --wcsfile=$inputs --wcshdu=$hdu $quiet)
    xcenter=$(echo "$xycenter" | awk '{print $1}')
    ycenter=$(echo "$xycenter" | awk '{print $2}')
else
    xcenter=$xcoord
    ycenter=$ycoord
fi





# Compute the width of the stamp
# ------------------------------
#
# If the width of the stamp is specified by the user, use that size.
# Otherwise, make the stamp width of the same size than two times the
# maximum radius for computing the flux factor. This is the maximum radius
# that is needed for computing the flux value.
if [ x"$stampwidth" = x ]; then
    stampwidth=$(astarithmetic $normradiusmax float32 2.0 x 1.0 + --quiet)
fi





# Crop the original image around the object
# -----------------------------------------
#
# Crop the object around its center with the given stamp size width.
cropped=$tmpdir/cropped-$objectid.fits
astcrop $inputs --hdu=$hdu --mode=img \
        --center=$xcenter,$ycenter \
        --width=$stampwidth --output=$cropped $quiet





# Function to find label of desired region
# ----------------------------------------
#
# Given a certain extension ('CLUMPS' or 'OBJECTS'), find the respective
# label.
find_central_label () {
  # Input arguments
  hdu=$1

  # Set the parameters.
  case $hdu in
      CLUMPS) labname=clump;;
      OBJECTS) labname=object;;
      *) cat <<EOF
$scriptname: ERROR: a bug! Please contact us at bug-gnuastro@gnu.org to fix the problem. The first argument to 'find_central_label' function is not 'CLUMPS' or 'OBJECTS'
EOF
      ;;
  esac

  # Crop the labeled image.
  cropped_core=$tmpdir/cropped-core-$objectid.fits
  astcrop $segment --hdu=$hdu --mode=img $quiet --width=$corewidth \
          --center=$xcenter,$ycenter --output=$cropped_core
  lab=$(astarithmetic $cropped_core unique --quiet)
  numlab=$(echo "$lab" | awk '{print NF}')
  if [ $numlab != 1 ]; then
    cat <<EOF
$scriptname: ERROR: there is more than one $labname label in the core region around the given coordinate (specified by '--corewidth=$corewidth', containing $labname labels: $lab). Therefore it is not possible to unambiguously identify a single $labname. Please decrease the box size given to '--corewidth'.
EOF
    exit 1
  fi

  # Write the output in a file.
  echo $lab > $tmpdir/cropped-core-$labname-$objectid.txt
}





# Crop and unlabel the segmentation image
# ---------------------------------------
#
# If the user provides a segmentation image, treat it appropiately in order
# to mask all objects that are not the central one. If not, just consider
# that the cropped and masked image is the cropped (not masked) image. The
# process is as follow:
#   - Crop the original mask image.
#   - Crop the original mask image to a central region (core), in order to
#     compute what is the central object id. This is necessary to unmask
#     this object.
#   - Compute what is the central object value, using the median value.
#   - In the original cropped mask, convert all pixels belonging to the
#     central object to zeros. By doing this, the central object becomes as
#     sky.
#   - Mask all non zero pixels in the mask image as nan values.
if [ x"$segment" != x ]; then

  # Find the object and clump labels of the target.
  find_central_label CLUMPS
  find_central_label OBJECTS
  clab=$(cat $tmpdir/cropped-core-clump-$objectid.txt)
  olab=$(cat $tmpdir/cropped-core-object-$objectid.txt)

  # Crop the object and clump image to same size as desired stamp.
  cropclp=$tmpdir/cropped-clumps-$objectid.fits
  cropobj=$tmpdir/cropped-objects-$objectid.fits
  astcrop $segment --hdu=OBJECTS --mode=img \
          --center=$xcenter,$ycenter \
          --width=$stampwidth --output=$cropobj $quiet
  astcrop $segment --hdu=CLUMPS --mode=img \
          --center=$xcenter,$ycenter \
          --width=$stampwidth --output=$cropclp $quiet

  # Mask all the undesired regions.
  cropped_masked=$tmpdir/cropped-masked-$objectid.fits
  astarithmetic $cropped --hdu=1 set-i --output=$cropped_masked \
                $cropobj --hdu=1 set-o \
                $cropclp --hdu=1 set-c \
                                       \
                c o $olab ne 0 where c $clab eq -1 where 0 gt set-cmask \
                o o $olab eq 0 where set-omask \
                i omask cmask or nan where $quiet
else
  cropped_masked=$cropped
fi





# Crop the PSF image with the same size.
psfcropped=$tmpdir/cropped-psf-$objectid.fits
psfxcenter=$(astfits $psf -h$psfhdu --keyvalue=NAXIS1 -q \
                 | awk '{print $1/2+0.5}')
psfycenter=$(astfits $psf -h$psfhdu --keyvalue=NAXIS2 -q \
                 | awk '{print $1/2+0.5}')
astcrop $psf --hdu=$psfhdu --mode=img \
        --center=$psfxcenter,$psfycenter \
        --width=$stampwidth --output=$psfcropped $quiet





# Build a radial profile image. It will be used to only select pixels
# within the requested radial range.
radcenter=$(echo $stampwidth | awk '{print $1/2+0.5}')
radradius=$(echo $stampwidth | awk '{print $1+2}')
radcropped=$tmpdir/cropped-radial-$objectid.fits
echo "1 $radcenter $radcenter 7 $radradius 0 0 1 1 1" \
     | astmkprof --background=$psfcropped --clearcanvas \
                 --oversample=1 --output=$radcropped $quiet





# Find the multiplication factor
multipimg=$tmpdir/for-factor-$objectid.fits
astarithmetic $cropped -h1 set-i \
              $psfcropped -h1 set-p \
              $radcropped -h1 set-r \
              r $normradiusmin lt r $normradiusmax ge or set-m \
              i p / m nan where -o$multipimg $quiet
aststatistics $multipimg --sclipparams=$sigmaclip  --sigclip-median





# Remove temporary files
# ----------------------
#
# If the user does not specify to keep the temporal files with the option
# `--keeptmp', then remove the whole directory.
if [ $keeptmp = 0 ]; then
    rm -r $tmpdir
fi
